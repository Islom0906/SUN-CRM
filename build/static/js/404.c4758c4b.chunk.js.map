{"version":3,"file":"static/js/404.c4758c4b.chunk.js","mappings":"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","sources":["@crema/core/Form/FormInput.jsx","@crema/core/Form/FormInputNumber.jsx","pages/sample/Payment Method/PaymentPostEdit.jsx","../node_modules/antd/es/col/index.js"],"sourcesContent":["import React from 'react';\nimport {Form, Input} from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst FormInput = ({label,name,required,required_text,warning}) => {\n    return (\n        <Form.Item\n            label={warning ? <div>\n                <p>{label}</p>\n                <br/>\n                <p>{warning}</p>\n            </div>:<div>{label}</div>}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <Input />\n        </Form.Item>\n    );\n};\n\nexport default FormInput;\n\nFormInput.propTypes = {\n    label: PropTypes.string,\n    warning: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React from 'react';\nimport {Form,  InputNumber} from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst FormInputNumber = ({label,name,required,required_text}) => {\n    return (\n        <Form.Item\n            label={label}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <InputNumber style={{width:'100%'}}/>\n        </Form.Item>\n    );\n};\n\nexport default FormInputNumber;\n\nFormInputNumber.propTypes = {\n    label: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React, {useEffect, useMemo} from 'react';\nimport {Button, Col, Form, message, Row, Select} from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\nimport FormInput from \"../../../@crema/core/Form/FormInput\";\nimport FormInputNumber from \"../../../@crema/core/Form/FormInputNumber\";\n\n\nconst initialValueForm = {\n    name: \"\",\n    discount: null,\n    fristPay: null,\n    activate: true,\n    monthCount: null,\n    ploshadSum:null\n};\n\n\nconst PaymentPostEdit = () => {\n\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId} = useSelector(state => state.editData)\n    const dispatch = useDispatch()\n\n\n\n\n\n\n\n\n    // query-payment\n    const {\n        mutate: postPaymentMutate,\n        data: postPayment,\n        isLoading: postPaymentLoading,\n        isSuccess: postPaymentSuccess,\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj]}`)\n            }\n        }\n    });\n\n    // query-edit\n    const {\n        isLoading: editPaymentLoading,\n        data: editPaymentData,\n        refetch: editPaymentRefetch,\n        isSuccess: editPaymentSuccess,\n\n    } = useQuery([\"edit-payment\", editId], () => apiService.getDataByID(\"/PaymentMetod\", editId), {\n        enabled: false\n    });\n    // put-query\n    const {\n        mutate: putPayment,\n        isLoading: putPaymentLoading,\n        data: putData,\n        isSuccess: putPaymentSuccess\n    } = useMutation(({\n                         url, data, id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj]}`)\n            }\n        }\n    });\n\n\n    //                                              =====useEffect====\n\n\n\n    // payment success\n    useEffect(() => {\n        if (putPaymentSuccess) {\n            dispatch({type: EDIT_DATA, payload: \"\"})\n        }\n        if (postPaymentSuccess || putPaymentSuccess) {\n            navigate('/payment')\n        }\n    }, [postPayment, putData])\n\n    // if edit payment\n    useEffect(() => {\n        if (editId !== \"\") {\n            editPaymentRefetch();\n        }\n    }, [editId]);\n\n    // if no edit payment\n    useEffect(() => {\n        if (editId === \"\") {\n            form.setFieldsValue(initialValueForm)\n        }\n    }, []);\n\n\n    //edit payment\n    useEffect(() => {\n\n        if (editPaymentSuccess) {\n\n            const edit = {\n                name: editPaymentData?.name,\n                discount:editPaymentData?.discount,\n                fristPay: editPaymentData?.fristPay,\n                activate: editPaymentData?.activate,\n                monthCount: editPaymentData?.monthCount,\n                ploshadSum: editPaymentData?.ploshdSum,\n            }\n\n            form.setFieldsValue(edit)\n        }\n\n    }, [editPaymentData])\n    const onFinish = (values) => {\n\n\n\n        // const data = {\n        //     name: values.name,\n        //     houseId: values.houseId,\n        //\n        // };\n        if (editPaymentSuccess) {\n            putPayment({url: `/PaymentMetod`, data:values,id:editId});\n        } else {\n            postPaymentMutate({url: \"/PaymentMetod/\", data:values});\n        }\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n    // refresh page again get data\n\n    useEffect(() => {\n        const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n        if (storedValues) {\n            storedValues.images = []\n            form.setFieldsValue(storedValues);\n        }\n\n        const handleBeforeUnload = () => {\n\n            localStorage.setItem('myFormValues', JSON.stringify(form.getFieldsValue()),);\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            localStorage.removeItem('editDataId')\n            localStorage.removeItem('myFormValues')\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        }\n    }, []);\n\n\n\n\n// option status\n    const optionsStatus = useMemo(() => {\n            return [{\n                value: true,\n                label: 'Активный',\n            },\n                {\n                    value: false,\n                    label: 'Нет активного',\n                }\n            ];\n    }, []);\n    return (<div>\n        {(postPaymentLoading || editPaymentLoading || putPaymentLoading) ? <AppLoader/> :\n            <Form\n                form={form}\n                name=\"basic\"\n                labelCol={{\n                    span: 24\n                }}\n                wrapperCol={{\n                    span: 24\n                }}\n                style={{\n                    maxWidth: \"100%\"\n                }}\n                initialValues={initialValueForm}\n                onFinish={onFinish}\n                onFinishFailed={onFinishFailed}\n                autoComplete=\"off\"\n            >\n\n\n                <Row gutter={20}>\n                    <Col span={12}>\n                        <FormInput\n                            required={true}\n                            required_text={'Требуется имя способа оплаты'}\n                            label={'Название способа оплаты'}\n                            name={'name'}\n                        />\n                    </Col>\n                    <Col span={12}>\n                        <FormInputNumber\n                            required={true}\n                            required_text={'Требуется скидка'}\n                            label={'Скидка'}\n                            name={'discount'}\n                        />\n                    </Col>\n                    <Col span={24}>\n                        <FormInputNumber\n                            required={true}\n                            required_text={'Требуется цена'}\n                            label={'цена за 1 квадратный метр'}\n                            name={'ploshadSum'}\n                        />\n                    </Col>\n                </Row>\n                <Row gutter={20}>\n                    <Col span={12}>\n                        <FormInputNumber\n                            required={true}\n                            required_text={'Требуется первоначальный взнос'}\n                            label={'Первоначальный взнос'}\n                            name={'fristPay'}\n                        />\n                    </Col>\n                    <Col span={12}>\n                        <FormInputNumber\n                            required={true}\n                            required_text={'Требуется количество месяцев'}\n                            label={'Количество месяцев'}\n                            name={'monthCount'}\n                        />\n                    </Col>\n                    <Col span={24}>\n                        <Form.Item\n                            label={'Он активирован?'}\n                            name={'activate'}\n                            rules={[{\n                                required: true, message: 'Вы должны выбрать состояние'\n                            }]}\n                            wrapperCol={{\n                                span: 24,\n                            }}\n                        >\n                            <Select\n                                style={{\n                                    width: '100%',\n                                }}\n                                placeholder='Выберите одну состояние'\n                                optionLabelProp='label'\n                                options={optionsStatus}\n                            />\n                        </Form.Item>\n                    </Col>\n                </Row>\n\n\n\n                <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\", marginTop: \"20px\"}}>\n                    {editPaymentSuccess ? 'Изменить' : 'Создать'}\n                </Button>\n            </Form>}\n    </div>);\n};\n\nexport default PaymentPostEdit;","import { Col } from '../grid';\nexport default Col;"],"names":["_ref","label","name","required","required_text","warning","_jsx","Form","Item","_jsxs","children","rules","message","Input","InputNumber","style","width","initialValueForm","discount","fristPay","activate","monthCount","ploshadSum","PaymentPostEdit","form","useForm","navigate","useNavigate","editId","useSelector","state","editData","dispatch","useDispatch","mutate","postPaymentMutate","data","postPayment","isLoading","postPaymentLoading","isSuccess","postPaymentSuccess","useMutation","url","apiService","postData","onSuccess","success","onError","error","obj","response","concat","editPaymentLoading","editPaymentData","refetch","editPaymentRefetch","editPaymentSuccess","useQuery","getDataByID","enabled","putPayment","putPaymentLoading","putData","putPaymentSuccess","_ref2","id","useEffect","type","EDIT_DATA","payload","setFieldsValue","edit","ploshdSum","storedValues","JSON","parse","localStorage","getItem","images","handleBeforeUnload","setItem","stringify","getFieldsValue","window","addEventListener","removeItem","removeEventListener","optionsStatus","useMemo","value","AppLoader","labelCol","span","wrapperCol","maxWidth","initialValues","onFinish","values","onFinishFailed","errorInfo","console","log","autoComplete","Row","gutter","Col","FormInput","FormInputNumber","Select","placeholder","optionLabelProp","options","Button","htmlType","marginTop"],"sourceRoot":""}