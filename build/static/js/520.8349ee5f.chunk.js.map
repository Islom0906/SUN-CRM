{"version":3,"file":"static/js/520.8349ee5f.chunk.js","mappings":"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","sources":["pages/sample/Dashboard/OrderChart.jsx","pages/sample/Dashboard/index.jsx"],"sourcesContent":["import {\n    BarChart,\n    Bar,\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    Tooltip,\n    Legend,\n    ResponsiveContainer,\n    Pie,\n    PieChart, Cell\n} from 'recharts';\nimport {useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {Col, message, Row, Typography} from 'antd';\nimport {useEffect, useMemo} from 'react';\nimport {useAuthUser} from \"../../../@crema/utility/AuthHooks\";\n\nconst {Title} = Typography;\n\n\nconst DealersChart = () => {\n    const {user} = useAuthUser()\n    const {data, isError, isLoading, refetch} = useQuery(\n        'order-get',\n        () => apiService.getData('Apartment/Statistic'),\n        {\n            enabled: false,\n            onError: (error) => {\n\n                message.error(error);\n            },\n        },\n    );\n\n    const {data:dataHomeStatus, isError:errorHomeStatus, isLoading:loadingHomeStatus, refetch:refetchHomeStatus} = useQuery(\n        'get-by-status',\n        () => apiService.getData('Apartment/FullStatistic'),\n        {\n            enabled: false,\n            onError: (error) => {\n\n                message.error(error);\n            },\n        },\n    );\n\n    useEffect(() => {\n        refetch()\n        refetchHomeStatus()\n    }, []);\n\n\n    const dataOrder = useMemo(() => {\n        if (isLoading || isError) {\n            return [];\n        }\n\n\n        data?.map((item) => {\n\n            item.dateTime = new Date(item.dateTime).toLocaleDateString();\n        })\n        console.log(data)\n        return data\n    }, [data, isLoading, isError]);\n\n\n    const dataHomeStatusChart = useMemo(() => {\n        if (loadingHomeStatus || errorHomeStatus) {\n            return [];\n        }\n\n        const data=[\n            {\n                name:'Куплено',\n                value:dataHomeStatus?.buyed\n            },\n            {\n                name:'Пустой',\n                value:dataHomeStatus?.empty\n            },\n            {\n                name:'Занят',\n                value:dataHomeStatus?.busied\n            }\n        ]\n\n\n        return data\n    }, [dataHomeStatus, loadingHomeStatus, errorHomeStatus]);\n    const COLORS = ['#e70505', '#00C49F', '#FFBB28'];\n\n\n    return (\n        <div>\n\n            <Row>\n                <Col span={16}>\n                    <Title type='h2'>Статистика</Title>\n                    {\n                        user.role[1] ?\n                            <ResponsiveContainer width=\"100%\" height={300}>\n                                <BarChart data={dataOrder}>\n                                    <CartesianGrid strokeDasharray=\"3 6\"/>\n                                    <XAxis dataKey=\"name\"/>\n                                    <YAxis/>\n                                    <Tooltip/>\n                                    <Legend/>\n                                    <Bar dataKey=\"count\" fill=\"#8884d8\"/>\n                                </BarChart>\n                            </ResponsiveContainer>\n                            :\n                            <ResponsiveContainer width=\"100%\" height={300}>\n                                <BarChart data={dataOrder}>\n                                    <CartesianGrid strokeDasharray=\"3 6\"/>\n                                    <XAxis dataKey=\"dateTime\"/>\n                                    <YAxis/>\n                                    <Tooltip/>\n                                    <Legend/>\n                                    <Bar dataKey=\"count\" fill=\"#8884d8\"/>\n                                </BarChart>\n                            </ResponsiveContainer>\n                    }\n                </Col>\n                <Col span={8}>\n                    {/*<Title type='h2'>Статистика статус дома</Title>*/}\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <PieChart width={'100%'} height={'100%'}>\n                            <Pie\n                                dataKey=\"value\"\n                                isAnimationActive={true}\n                                data={dataHomeStatusChart}\n                                cx=\"50%\"\n                                cy=\"50%\"\n                                outerRadius={80}\n                                fill=\"#8884d8\"\n                                label\n                            >\n                                {dataHomeStatusChart.map((entry, index) => (\n                                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                                ))}\n                            </Pie>\n\n                            <Tooltip />\n                        </PieChart>\n                    </ResponsiveContainer>\n                </Col>\n            </Row>\n\n\n        </div>\n    )\n}\n\nexport default DealersChart","import OrderChart from './OrderChart';\n// import ProductChart from \"./ProductChart\";\n\n\n\n\n\nconst Dashboard = () => {\n    return (\n        <div>\n            <OrderChart/>\n       {/*<ProductChart/>*/}\n        </div>\n    );\n};\n\nexport default Dashboard;"],"names":["Title","Typography","DealersChart","user","useAuthUser","data","isError","isLoading","refetch","useQuery","apiService","getData","enabled","onError","error","message","dataHomeStatus","errorHomeStatus","loadingHomeStatus","refetchHomeStatus","useEffect","dataOrder","useMemo","map","item","dateTime","Date","toLocaleDateString","console","log","dataHomeStatusChart","name","value","buyed","empty","busied","COLORS","_jsx","children","_jsxs","Row","Col","span","type","role","ResponsiveContainer","width","height","BarChart","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Bar","fill","PieChart","Pie","isAnimationActive","cx","cy","outerRadius","label","entry","index","Cell","length","concat","Dashboard","OrderChart"],"sourceRoot":""}